#!/bin/bash
# 02614 - High-Performance Computing, January 2024
# Batch script to run matmult on a dedicated GPU server in the hpcintrogpu queue

#BSUB -J mm_batch_gpu
#BSUB -o mm_batch_gpu_%J.out
#BSUB -q hpcintrogpu
#BSUB -n 32                      
#BSUB -R "rusage[mem=2048]"
#BSUB -W 15
#BSUB -R "span[hosts=1]"
#BSUB -gpu "num=1:mode=exclusive_process"

# Define the executable name
EXECUTABLE=matmult_c.nvc++

# Define problem sizes
SIZES="100 200 500 1000 2000 5000"

# Define computation methods
TYPES="mkn_omp lib"

# Define number of threads
THREADS="1 2 4 8 16"

# Enable (1) / Disable (0) result checking
export MATMULT_COMPARE=0

# Load CUDA libraries
module load nvhpc/24.11

# Output file for results
RESULTS_FILE="performance_results.txt"

# Clear the results file before writing new data
echo "Method, Threads, Size, Execution Time (s), MFLOPS" > $RESULTS_FILE

# Run the performance tests
for T in $TYPES; do
    for N in $THREADS; do
        export OMP_NUM_THREADS=$N  # Set number of OpenMP threads
        for S in $SIZES; do
            # Run the executable and capture the execution time
            OUTPUT=$(./$EXECUTABLE $T $S $S $S)
            EXEC_TIME=$(echo "$OUTPUT" | grep "Execution time" | sed 's/[^0-9.]//g' | tail -n1)  # Extract time from output

            # Compute MFLOPS (Floating-Point Operations per Second)
            MFLOPS=$(echo "scale=2; (2 * $S * $S * $S) / ($EXEC_TIME * 1000000)" | bc)

            # Print and save results
            echo "$T, $N, $S, $EXEC_TIME, $MFLOPS" | tee -a $RESULTS_FILE
        done
    done
done

echo "Results saved to $RESULTS_FILE"
