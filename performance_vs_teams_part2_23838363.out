Testing mkn_offload with team size 0...
Saved: mkn_offload, 1000, 0, 0.008333, 240.009600
Testing mnk_offload with team size 0...
Saved: mnk_offload, 1000, 0, 0.002835, 705.467372
Testing mkn_offload with team size 32...
Saved: mkn_offload, 1000, 32, 0.008085, 247.371675
Testing mnk_offload with team size 32...
Saved: mnk_offload, 1000, 32, 0.002872, 696.378830
Testing mkn_offload with team size 64...
Saved: mkn_offload, 1000, 64, 0.008152, 245.338567
Testing mnk_offload with team size 64...
Saved: mnk_offload, 1000, 64, 0.002841, 703.977472
Testing mkn_offload with team size 128...
Saved: mkn_offload, 1000, 128, 0.008097, 247.005063
Testing mnk_offload with team size 128...
Saved: mnk_offload, 1000, 128, 0.002857, 700.035001
Testing mkn_offload with team size 256...
Saved: mkn_offload, 1000, 256, 0.008055, 248.292985
Testing mnk_offload with team size 256...
Saved: mnk_offload, 1000, 256, 0.018999, 105.268698
Testing mkn_offload with team size 512...
Saved: mkn_offload, 1000, 512, 0.008033, 248.972986
Testing mnk_offload with team size 512...
Saved: mnk_offload, 1000, 512, 0.002901, 689.417442
Testing mkn_offload with team size 1024...
Saved: mkn_offload, 1000, 1024, 0.008082, 247.463499
Testing mnk_offload with team size 1024...
Saved: mnk_offload, 1000, 1024, 0.002833, 705.965407
Testing mkn_offload with team size 2048...
Saved: mkn_offload, 1000, 2048, 0.007960, 251.256281
Testing mnk_offload with team size 2048...
Saved: mnk_offload, 1000, 2048, 0.008609, 232.315019
Testing mkn_offload with team size 4096...
Saved: mkn_offload, 1000, 4096, 0.008024, 249.252243
Testing mnk_offload with team size 4096...
Saved: mnk_offload, 1000, 4096, 0.002835, 705.467372
Testing mkn_offload with team size 8192...
Saved: mkn_offload, 1000, 8192, 0.008072, 247.770069
Testing mnk_offload with team size 8192...
Saved: mnk_offload, 1000, 8192, 0.002859, 699.545295
Testing mkn_offload with team size 16384...
Saved: mkn_offload, 1000, 16384, 0.014098, 141.864094
Testing mnk_offload with team size 16384...
Saved: mnk_offload, 1000, 16384, 0.004841, 413.137781
Testing mkn_offload with team size 32000...
Saved: mkn_offload, 1000, 32000, 0.007998, 250.062515
Testing mnk_offload with team size 32000...
Saved: mnk_offload, 1000, 32000, 0.002869, 697.107005
Results saved to team_size_performance_results.csv

------------------------------------------------------------
Sender: LSF System <lsfadmin@hpc.dtu.dk>
Subject: Job 23838363: <performance_vs_teams_part2> in cluster <dcc> Done

Job <performance_vs_teams_part2> was submitted from host <n-62-12-81> by user <s182821> in cluster <dcc> at Thu Jan 23 11:46:37 2025
Job was executed on host(s) <32*n-62-12-89>, in queue <hpcintrogpu>, as user <s182821> in cluster <dcc> at Thu Jan 23 11:47:38 2025
</zhome/4c/5/135583> was used as the home directory.
</zhome/4c/5/135583/assignment_3/repo/hpc_assignment3> was used as the working directory.
Started at Thu Jan 23 11:47:38 2025
Terminated at Thu Jan 23 11:49:34 2025
Results reported at Thu Jan 23 11:49:34 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input
#!/bin/bash
# Batch script to test different team sizes for mkn_offload and mnk_offload

#BSUB -J performance_vs_teams_part2
#BSUB -o performance_vs_teams_part2_%J.out
#BSUB -q hpcintrogpu
#BSUB -n 32
#BSUB -R "rusage[mem=2048]"
#BSUB -W 15
#BSUB -R "span[hosts=1]"
#BSUB -gpu "num=1:mode=exclusive_process"

# Define methods to test
METHODS="mkn_offload mnk_offload"

# Define matrix size (fixed for this experiment)
MATRIX_SIZE=1000

# Define number of teams to experiment with
TEAM_SIZES="0 32 64 128 256 512 1024 2048 4096 8192 16384 32000"

# Output file
RESULTS_FILE="team_size_performance_results.csv"

# Clear old results
echo "Method, Matrix Size, Teams, Kernel (s), GFLOPS/s" > $RESULTS_FILE

# Load necessary modules (adjust if required)
module load nvhpc/24.11

# Run tests for MKN and MNK with different team sizes
for TEAM in $TEAM_SIZES; do
    for METHOD in $METHODS; do
        echo "Testing $METHOD with team size $TEAM..."

        # Run executable with team size and capture output
        OUTPUT=$(./matmult_c.nvc++ "$METHOD" "$MATRIX_SIZE" "$MATRIX_SIZE" "$MATRIX_SIZE" "$TEAM")

        # Extract Kernel time
        RESULT_LINE=$(echo "$OUTPUT" | grep -m1 "$METHOD")
        KERNEL=$(echo "$RESULT_LINE" | awk -F', ' '{print $5}')

        # Check if Kernel time is empty or zero, if so, set to zero
        KERNEL=${KERNEL:-0}

        # Compute GFLOPS/s: (2 * m * n * k) / (Kernel Time * 10^9)
        if [[ "$KERNEL" == "0" || "$KERNEL" == "" ]]; then
            GFLOPS="0"
        else
            GFLOPS=$(echo "scale=6; (2 * $MATRIX_SIZE * $MATRIX_SIZE * $MATRIX_SIZE) / ($KERNEL * 10^9)" | bc)

(... more ...)
------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   140.00 sec.
    Max Memory :                                 111 MB
    Average Memory :                             111.00 MB
    Total Requested Memory :                     65536.00 MB
    Delta Memory :                               65425.00 MB
    Max Swap :                                   -
    Max Processes :                              4
    Max Threads :                                9
    Run time :                                   117 sec.
    Turnaround time :                            177 sec.

The output (if any) is above this job summary.

